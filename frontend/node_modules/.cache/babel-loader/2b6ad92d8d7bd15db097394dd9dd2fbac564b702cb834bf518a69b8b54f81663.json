{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\chat-app\\\\frontend\\\\src\\\\components\\\\Chat.js\",\n  _s = $RefreshSig$();\n// Chat.js (Frontend)\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport \"../styles/Chat.css\";\n\n// Use the backend server URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nfunction Chat({\n  username\n}) {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState('');\n  useEffect(() => {\n    // When the user joins, emit the join event\n    socket.emit('join', username);\n\n    // Update the active users list when receiving the event from the server\n    socket.on('updateUserList', users => {\n      // Avoid duplicates in the active users list\n      const uniqueUsers = users.filter((user, index, self) => index === self.findIndex(u => u.username === user.username));\n      setActiveUsers(uniqueUsers);\n    });\n\n    // Listen for private messages\n    socket.on('receive_private_message', data => {\n      setMessages(prevMessages => [...prevMessages, data]);\n    });\n\n    // Clean up when the component unmounts\n    return () => {\n      socket.off('updateUserList');\n      socket.off('receive_private_message');\n    };\n  }, [username]);\n  const sendMessage = e => {\n    e.preventDefault();\n    if (message.trim() && selectedUser) {\n      socket.emit('send_private_message', {\n        sender: username,\n        receiver: selectedUser,\n        message\n      });\n      setMessages(prevMessages => [...prevMessages, {\n        sender: username,\n        message\n      }]);\n      setMessage(''); // Clear the message input after sending\n    } else {\n      alert(\"Please select a user and type a message!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Welcome, \", username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Active Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: activeUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => setSelectedUser(user.username),\n            className: selectedUser === user.username ? 'active' : '',\n            children: user.username\n          }, user.socketId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Chat with \", selectedUser]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: msg.sender === username ? 'sender' : 'receiver',\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: msg.sender === username ? 'Me' : msg.sender\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 33\n          }, this), \": \", msg.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMessage,\n        className: \"message-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"veHDX4CIHgmxqO69x3lOuHAU17Q=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","Chat","username","_s","message","setMessage","messages","setMessages","activeUsers","setActiveUsers","selectedUser","setSelectedUser","emit","on","users","uniqueUsers","filter","user","index","self","findIndex","u","data","prevMessages","off","sendMessage","e","preventDefault","trim","sender","receiver","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","socketId","msg","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/hp/chat-app/frontend/src/components/Chat.js"],"sourcesContent":["// Chat.js (Frontend)\r\nimport React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport \"../styles/Chat.css\";\r\n\r\n// Use the backend server URL\r\nconst socket = io('http://localhost:3001');\r\n\r\nfunction Chat({ username }) {\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [activeUsers, setActiveUsers] = useState([]);\r\n    const [selectedUser, setSelectedUser] = useState('');\r\n\r\n    useEffect(() => {\r\n        // When the user joins, emit the join event\r\n        socket.emit('join', username);\r\n\r\n        // Update the active users list when receiving the event from the server\r\n        socket.on('updateUserList', (users) => {\r\n            // Avoid duplicates in the active users list\r\n            const uniqueUsers = users.filter((user, index, self) =>\r\n                index === self.findIndex((u) => u.username === user.username)\r\n            );\r\n            setActiveUsers(uniqueUsers);\r\n        });\r\n\r\n        // Listen for private messages\r\n        socket.on('receive_private_message', (data) => {\r\n            setMessages(prevMessages => [...prevMessages, data]);\r\n        });\r\n\r\n        // Clean up when the component unmounts\r\n        return () => {\r\n            socket.off('updateUserList');\r\n            socket.off('receive_private_message');\r\n        };\r\n    }, [username]);\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        if (message.trim() && selectedUser) {\r\n            socket.emit('send_private_message', {\r\n                sender: username,\r\n                receiver: selectedUser,\r\n                message,\r\n            });\r\n            setMessages(prevMessages => [...prevMessages, { sender: username, message }]);\r\n            setMessage(''); // Clear the message input after sending\r\n        } else {\r\n            alert(\"Please select a user and type a message!\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"sidebar\">\r\n                <h2>Welcome, {username}</h2>\r\n                <div className=\"user-list\">\r\n                    <h3>Active Users</h3>\r\n                    <ul>\r\n                        {activeUsers.map(user => (\r\n                            <li\r\n                                key={user.socketId}\r\n                                onClick={() => setSelectedUser(user.username)}\r\n                                className={selectedUser === user.username ? 'active' : ''}\r\n                            >\r\n                                {user.username}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n            {selectedUser && (\r\n                <div className=\"chat-box\">\r\n                    <h3>Chat with {selectedUser}</h3>\r\n                    <div className=\"messages\">\r\n                        {messages.map((msg, index) => (\r\n                            <p key={index} className={msg.sender === username ? 'sender' : 'receiver'}>\r\n                                <strong>{msg.sender === username ? 'Me' : msg.sender}</strong>: {msg.message}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                    <form onSubmit={sendMessage} className=\"message-form\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={message}\r\n                            onChange={(e) => setMessage(e.target.value)}\r\n                            placeholder=\"Type a message...\"\r\n                        />\r\n                        <button type=\"submit\">Send</button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}